Index: src/main/java/com/example/project/Tema1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\r\n\r\npublic class Tema1 {\r\n\r\n\tpublic static void main(final String[] args)\r\n\t{\r\n\t\tif(args == null)\r\n\t\t{\r\n\t\t\tSystem.out.print(\"Hello world!\");\r\n\t\t}\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/Tema1.java b/src/main/java/com/example/project/Tema1.java
--- a/src/main/java/com/example/project/Tema1.java	(revision 5da4e4958b36dd206002ceaa2566a0bf6e863464)
+++ b/src/main/java/com/example/project/Tema1.java	(date 1669919267033)
@@ -2,11 +2,59 @@
 
 public class Tema1 {
 
-	public static void main(final String[] args)
-	{
-		if(args == null)
-		{
-			System.out.print("Hello world!");
+	public static void main(final String[] args){
+
+		if(args == null) {
+			System.out.println("Hello world!");
+			return;
+		}
+
+		if (args[0].compareTo("-create-user") == 0) {
+			MetodeTema.createUserCommand(args);
+		}
+
+		if (args[0].compareTo("-create-question") == 0) {
+			MetodeTema.createQuestionCommand(args);
+		}
+
+		if (args[0].compareTo("-get-question-id-by-text") == 0) {
+			MetodeTema.getQuestionIDByTextCommand(args);
+		}
+
+		if (args[0].compareTo("-get-all-questions") == 0) {
+			MetodeTema.getAllQuestionsCommand(args);
+		}
+
+		if (args[0].compareTo("-create-quizz") == 0) {
+			MetodeTema.createQuizzCommand(args);
+		}
+
+		if (args[0].compareTo("-get-quizz-by-name") == 0) {
+			MetodeTema.getQuizzByName(args);
+		}
+
+		if (args[0].compareTo("-get-all-quizzes") == 0) {
+			MetodeTema.getAllQuizzesCommand(args);
+		}
+
+		if (args[0].compareTo("-get-quizz-details-by-id") == 0) {
+			MetodeTema.getQuizzDetailsByIdCommand(args);
+		}
+
+		if (args[0].compareTo("-submit-quizz") == 0) {
+			MetodeTema.submitQuizzCommand(args);
+		}
+
+		if (args[0].compareTo("-delete-quizz-by-id") == 0) {
+			MetodeTema.deleteQuizzByIdCommand(args);
 		}
+
+		if (args[0].compareTo("-get-my-solutions") == 0) {
+			MetodeTema.getMySolutionsCommand(args);
+		}
+		if (args[0].compareTo("-cleanup-all") == 0) {
+			MetodeTema.cleanUpCommand();
+		}
+
 	}
 }
Index: src/main/java/com/example/project/answers.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/answers.csv b/src/main/java/com/example/project/answers.csv
new file mode 100644
--- /dev/null	(date 1669920448915)
+++ b/src/main/java/com/example/project/answers.csv	(date 1669920448915)
@@ -0,0 +1,5 @@
+question_identifier,identifier,answer,correct
+1,1,Yes,true
+1,2,No,false
+2,3,C,true
+2,4,L,false
Index: src/main/java/com/example/project/Quizz.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/Quizz.java b/src/main/java/com/example/project/Quizz.java
new file mode 100644
--- /dev/null	(date 1669918784259)
+++ b/src/main/java/com/example/project/Quizz.java	(date 1669918784259)
@@ -0,0 +1,285 @@
+package com.example.project;
+
+import com.opencsv.CSVWriter;
+
+import java.io.*;
+import java.util.ArrayList;
+
+public class Quizz implements Comparable<String> {
+
+    private final int identifier;
+    private final String name;
+    ArrayList<Question> questions;
+
+    private final User creator;
+
+    private final boolean is_completed;
+
+    private static int number_of_quizzes = 0;
+
+    public Quizz(String name, User creator) {
+        this.creator = creator;
+        this.name = name;
+        this.questions = new ArrayList<>();
+        number_of_quizzes++;
+        this.identifier = number_of_quizzes;
+        this.is_completed = false;
+    }
+
+    public Quizz(String name) {
+        this.creator = null;
+        this.name = name;
+        this.questions = null;
+        this.identifier = -1;
+        this.is_completed = false;
+    }
+
+    public int getIdentifier() {
+        return this.identifier;
+    }
+
+    public User getCreator() {
+        return this.creator;
+    }
+
+    public String getName() {
+        return this.name;
+    }
+
+    public static int getNumber_of_quizzes() {
+        return number_of_quizzes;
+    }
+
+    public boolean checkCompleted() {
+        return this.is_completed;
+    }
+
+    public static void resetNumber_of_quizzes() {
+        number_of_quizzes = 0;
+    }
+
+    public int compareTo(String name) {
+        return this.name.compareTo(name);
+    }
+
+    public static int readQuestionsForQuizz(String[] args, String path_to_question, Quizz quizz) {
+        int[] identifiers = new int[args.length - 4];
+        for (int j = 4; j < args.length; j++) {
+            String[] id_info = args[j].split(" ");
+            String id = MetodeTema.removeUselessCharacters(id_info[1]);
+            identifiers[j - 4] = Integer.parseInt(id);
+        }
+        try {
+            File file = new File(path_to_question);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if (read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            int i = 0;
+            while (read != null) {
+                if (i >= identifiers.length) {
+                    break;
+                }
+                String file_identifier = read.substring(0, read.indexOf(","));
+                int identifier = Integer.parseInt(file_identifier);
+                String text = read.substring(read.indexOf(",") + 1, read.lastIndexOf(","));
+                if (identifier == identifiers[i]) {
+                    quizz.questions.add(new Question(text, identifier));
+                    i++;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+            return i;
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return -1;
+    }
+
+    public static int readQuizzesFromFile(String path, Quizz quizz) {
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if (read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            while (read != null) {
+                String quizzName = read.substring(read.indexOf(",") + 1, read.indexOf(",", read.indexOf(",") + 1));
+                if (quizz.compareTo(quizzName) == 0) {
+                    br.close();
+                    fr.close();
+                    return -2;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    public static String createQuizzQuestionsForFile(String[] args) {
+        String quizz_questions = "";
+        for (int i = 4; i < args.length; i++) {
+            String[] id_info = args[i].split(" ");
+            String id = MetodeTema.removeUselessCharacters(id_info[1]);
+            quizz_questions += id + ";";
+            if (i == args.length - 1) {
+                quizz_questions = quizz_questions.substring(0, quizz_questions.length() - 1);
+            }
+        }
+        return quizz_questions;
+    }
+
+    public static String writeQuizzesToFile(String[] args, String path, Quizz quizz) {
+
+        try {
+            File file = new File(path);
+            FileWriter fileWriter = new FileWriter(file, true);
+            char[] csvFlags = {CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER};
+            CSVWriter csvWriter = new CSVWriter(fileWriter, ',', csvFlags[0], csvFlags[1], "\n");
+
+            int readQuestionsReturn = Quizz.readQuizzesFromFile(path, quizz);
+            if (readQuestionsReturn == -1) {
+                String[] header = {"identifier", "name", "questions", "creator", "completed"};
+                csvWriter.writeNext(header);
+            }
+            if (readQuestionsReturn == -2) {
+                csvWriter.close();
+                fileWriter.close();
+                return "{ 'status' : 'error', 'message' : 'Quizz name already exists'}";
+            }
+            String quizz_questions = Quizz.createQuizzQuestionsForFile(args);
+            String[] questionInfo = {String.valueOf(quizz.getIdentifier()), quizz.getName(),
+                    quizz_questions, quizz.getCreator().getUsername(),
+                    Boolean.toString(quizz.checkCompleted())};
+
+            csvWriter.writeNext(questionInfo);
+
+            csvWriter.close();
+            fileWriter.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static int getQuizzIdentifier(String path, Quizz quizz) {
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if (read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            while (read != null) {
+
+                String quizzName = read.substring(read.indexOf(",") + 1, read.indexOf(",", read.indexOf(",") + 1));
+                if (quizz.compareTo(quizzName) == 0) {
+                    int identifier = Integer.parseInt(read.substring(0, read.indexOf(",")));
+                    br.close();
+                    fr.close();
+                    return identifier;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return -2;
+    }
+
+    public static String getAllQuizzes(String path) {
+        String all_quizzes = "";
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if (read == null) {
+                br.close();
+                fr.close();
+                return null;
+            }
+            read = br.readLine();
+            while (read != null) {
+                String[] quizz_info = read.split(",");
+                String identifier = quizz_info[0];
+                String name = quizz_info[1];
+                String completed = MetodeTema.turnBooleanStringValueIntoCapital(quizz_info[4]);
+                all_quizzes += "{\"quizz_id\"" + " : " + "\"" + identifier + "\"" +
+                        ", " + "\"" + "quizz_name" + "\"" + " : "
+                        + "\"" + name + "\"" + ", " + "\"" + "is_completed" + "\"" +
+                        " : " + "\"" + completed + "\"}" + ", ";
+                read = br.readLine();
+            }
+            all_quizzes = all_quizzes.substring(0, all_quizzes.length() - 2);
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return all_quizzes;
+    }
+
+    public static String getQuizzDetailsById(String[] args) {
+        String quizz_details = "";
+        String path_to_quizzes = "src/main/java/com/example/project/quizzes.csv";
+        String path_to_questions = "src/main/java/com/example/project/questions.csv";
+        try {
+            File file = new File(path_to_quizzes);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if (read == null) {
+                br.close();
+                fr.close();
+                return null;
+            }
+            read = br.readLine();
+            while (read != null) {
+                String[] quizz_info = read.split(",");
+                String identifier = quizz_info[0];
+                if (identifier.equals(MetodeTema.removeUselessCharacters(args[3].split(" ")[1]))) {
+                    String[] question_ids = quizz_info[2].split(";");
+                    for(int i = 0 ;i < question_ids.length; i++) {
+                        String question_details = Question.getQuestionDetailsById(path_to_questions, question_ids[i]);
+                        quizz_details += question_details + ", ";
+                    }
+                    br.close();
+                    fr.close();
+                    return quizz_details;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static void deleteQuizzById(String[] args) {
+    }
+}
Index: src/main/java/com/example/project/HelperMethods.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/HelperMethods.java b/src/main/java/com/example/project/HelperMethods.java
new file mode 100644
--- /dev/null	(date 1669901793378)
+++ b/src/main/java/com/example/project/HelperMethods.java	(date 1669901793378)
@@ -0,0 +1,34 @@
+package com.example.project;
+
+public abstract class HelperMethods {
+
+    public static String removeUselessCharacters(String s) {
+        if(s == null) {
+            return null;
+        }
+        s = s.substring(1);
+        s = s.substring(0, s.length() - 1);
+        return s;
+    }
+
+    public static String findCommandInArgs(String[] args, String stringToFind) {
+        for(int i = 0; i < args.length; i++) {
+            String[] command = args[i].split(" ");
+            if(command[0].compareTo(stringToFind) == 0) {
+                return command[0];
+            }
+        }
+        return null;
+    }
+
+    public static boolean turnStringIntoBoolean(String string) {
+        return string.compareTo("1") == 0;
+    }
+
+    public static String turnBooleanStringValueIntoCapital(String string) {
+        if(string.compareTo("true") == 0) {
+            return "True";
+        }
+        return "False";
+    }
+}
Index: src/main/java/com/example/project/MetodeTema.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/MetodeTema.java b/src/main/java/com/example/project/MetodeTema.java
new file mode 100644
--- /dev/null	(date 1669920442732)
+++ b/src/main/java/com/example/project/MetodeTema.java	(date 1669920442732)
@@ -0,0 +1,313 @@
+package com.example.project;
+
+import java.io.File;
+
+public abstract class MetodeTema extends HelperMethods {
+
+    public static void createUserCommand(String[] args) {
+        if(findCommandInArgs(args, "-u") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");
+            return;
+        }
+        if(findCommandInArgs(args, "-p") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
+            return;
+        }
+
+        String[] username = args[1].split(" ");
+        String[] password = args[2].split(" ");
+
+        String path = "src/main/java/com/example/project/users.csv";
+        username[1] = MetodeTema.removeUselessCharacters(username[1]);
+        password[1] = MetodeTema.removeUselessCharacters(password[1]);
+        User user = new User(username[1], password[1]);
+
+        String writeUsersError = User.writeUsersToFile(path, user);
+        if(writeUsersError != null) {
+            System.out.println(writeUsersError);
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
+    }
+
+    public static void createQuestionCommand(String[] args){
+        String user_login_failed_error = User.checkLogin(args);
+        if(user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if(findCommandInArgs(args, "-text") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No question text provided'}");
+            return;
+        }
+        String[] text_info = args[3].split(" ", 2);
+        String text = MetodeTema.removeUselessCharacters(text_info[1]);
+        String[] type_info = args[4].split(" ");
+        String type = MetodeTema.removeUselessCharacters(type_info[1]);
+
+        Question question = new Question(text, type);
+
+        String addAnswersError = Question.addAnswers(args, question);
+        if(addAnswersError != null) {
+            System.out.println(addAnswersError);
+            return;
+        }
+        if(question.answers.size() == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No answer provided'}");
+            return;
+        }
+        if(question.answers.size() == 1) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Only one answer provided'}");
+            return;
+        }
+        if(question.answers.size() > 5) {
+            System.out.println("{ 'status' : 'error', 'message' : 'More than 5 answers were submited'}");
+            return;
+        }
+        String path_to_question = "src/main/java/com/example/project/questions.csv";
+        String writeQuestionsError = Question.writeQuestionsToFile(path_to_question, question);
+        if(writeQuestionsError != null) {
+            System.out.println(writeQuestionsError);
+            return;
+        }
+        if(Question.Answer.numberOfCorectAnswers(question.answers) > 1 && question.getType().compareTo("single") == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Single correct answer question has more than one correct answer'}");
+            return;
+        }
+        if(Question.Answer.numberOfCorectAnswers(question.answers) == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No correct answer provided'}");
+            return;
+        }
+        if(Question.Answer.checkDuplicateAnswers(question.answers)) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Same answer provided more than once'}");
+            return;
+        }
+
+        String path_to_answers = "src/main/java/com/example/project/answers.csv";
+
+        Question.Answer.writeAnswersToFile(path_to_answers, question);
+
+        System.out.println("{ 'status' : 'ok', 'message' : 'Question added successfully'}");
+    }
+
+    public static void getQuestionIDByTextCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if(user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        String[] text_info = args[3].split(" ", 2);
+        String text = MetodeTema.removeUselessCharacters(text_info[1]);
+
+        Question question = new Question(text);
+        String path_to_question = "src/main/java/com/example/project/questions.csv";
+        if(Question.readQuestionsFromFile(path_to_question, question) == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Question does not exist'}");
+            return;
+        }
+        int question_id = Question.getQuestionIdentifier(path_to_question, question);
+        System.out.println("{ 'status' : 'ok', 'message' :" + "'" + question_id + "'}");
+    }
+
+    public static void getAllQuestionsCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if(user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        String path_to_question = "src/main/java/com/example/project/questions.csv";
+        String questions = Question.getAllQuestions(path_to_question);
+        if(questions == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No questions found'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' :'[" + questions + "]'}");
+    }
+
+    public static void createQuizzCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if (findCommandInArgs(args, "-name") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizz name provided'}");
+            return;
+        }
+        String[] name_info = args[3].split(" ", 2);
+        String name = MetodeTema.removeUselessCharacters(name_info[1]);
+
+        String path_to_question = "src/main/java/com/example/project/questions.csv";
+        String[] username = args[1].split(" ");
+        String[] password = args[2].split(" ");
+
+        username[1] = MetodeTema.removeUselessCharacters(username[1]);
+        password[1] = MetodeTema.removeUselessCharacters(password[1]);
+        User user = new User(username[1], password[1]);
+
+        Quizz quizz = new Quizz(name, user);
+
+        int total_number_of_questions = (args.length - 4) / 2;
+        int current_question_index = Quizz.readQuestionsForQuizz(args,path_to_question, quizz);
+        if(current_question_index  <= total_number_of_questions) {
+            current_question_index++;
+            System.out.println("{ 'status' : 'error', 'message' : 'Question ID for question " + current_question_index + " does not exist'}");
+            return;
+        }
+
+        if(quizz.questions.size() == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No questions provided'}");
+            return;
+        }
+        if(quizz.questions.size() > 10) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Quizz has more than 10 questions'}");
+            return;
+        }
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+
+        String writeQuizzError = Quizz.writeQuizzesToFile(args, path_to_quizz, quizz);
+            if(writeQuizzError != null) {
+            System.out.println(writeQuizzError);
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : 'Quizz added succesfully'}");
+    }
+
+    public static void getQuizzByName(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if (findCommandInArgs(args, "-name") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizz name provided'}");
+            return;
+        }
+        String[] name_info = args[3].split(" ", 2);
+        String name = MetodeTema.removeUselessCharacters(name_info[1]);
+
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+        Quizz quizz = new Quizz(name);
+        if(Quizz.readQuizzesFromFile(path_to_quizz, quizz) == 0) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Quizz does not exist'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : '" + Quizz.getQuizzIdentifier(path_to_quizz, quizz) + "'}");
+    }
+
+    public static void getAllQuizzesCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+        String quizzes = Quizz.getAllQuizzes(path_to_quizz);
+        if(quizzes == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizzes found'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : '[" + quizzes + "]'}");
+    }
+
+    public static void getQuizzDetailsByIdCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if (findCommandInArgs(args, "-id") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizz id provided'}");
+            return;
+        }
+        String[] id_info = args[3].split(" ", 2);
+        String id = MetodeTema.removeUselessCharacters(id_info[1]);
+
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+        if(Quizz.getAllQuizzes(path_to_quizz) == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'Quizz does not exist'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : '" + Quizz.getQuizzDetailsById(args) + "'}");
+    }
+
+    public static void submitQuizzCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if (findCommandInArgs(args, "-quiz-id") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}");
+            return;
+        }
+        String[] id_info = args[3].split(" ", 2);
+        String id = MetodeTema.removeUselessCharacters(id_info[1]);
+
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+
+        if(Quizz.getQuizzDetailsById(args) == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quiz was found'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : ' }");
+    }
+
+    public static void deleteQuizzByIdCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        if (findCommandInArgs(args, "-id") == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}");
+            return;
+        }
+        String[] id_info = args[3].split(" ", 2);
+        String id = MetodeTema.removeUselessCharacters(id_info[1]);
+
+        String path_to_quizz = "src/main/java/com/example/project/quizzes.csv";
+        if(Quizz.getQuizzDetailsById(args) == null) {
+            System.out.println("{ 'status' : 'error', 'message' : 'No quiz was found'}");
+            return;
+        }
+        System.out.println("{ 'status' : 'ok', 'message' : 'Quizz deleted successfully'}");
+    }
+
+    public static void getMySolutionsCommand(String[] args) {
+        String user_login_failed_error = User.checkLogin(args);
+        if (user_login_failed_error != null) {
+            System.out.println(user_login_failed_error);
+            return;
+        }
+        String path_to_solutions = "src/main/java/com/example/project/solutions.csv";
+        System.out.println("{ 'status' : 'ok', 'message' : ' }");
+    }
+
+    public static void cleanUpCommand() {
+        String path_to_users = "src/main/java/com/example/project/users.csv";
+        File file_u = new File(path_to_users);
+        if(!file_u.delete()) {
+            return;
+        }
+        String path_to_questions = "src/main/java/com/example/project/questions.csv";
+        File file_q = new File(path_to_questions);
+        if(!file_q.delete()) {
+            return;
+        }
+        Question.resetNumber_of_questions();
+        String path_to_quizzes = "src/main/java/com/example/project/quizzes.csv";
+        File file_qu = new File(path_to_quizzes);
+        if(!file_qu.delete()) {
+            return;
+        }
+        Quizz.resetNumber_of_quizzes();
+        String path_to_answers = "src/main/java/com/example/project/answers.csv";
+        File file_a = new File(path_to_answers);
+        if(!file_a.delete()) {
+            return;
+        }
+        Question.Answer.resetNumber_of_answers();
+        System.out.println("{ 'status' : 'ok', 'message' : 'Cleanup finished successfully'}");
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/project/quizzes.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/quizzes.csv b/src/main/java/com/example/project/quizzes.csv
new file mode 100644
--- /dev/null	(date 1669920448917)
+++ b/src/main/java/com/example/project/quizzes.csv	(date 1669920448917)
@@ -0,0 +1,2 @@
+identifier,name,questions,creator,completed
+1,Chestionarul 1,1;2,test,false
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1669030078910)
+++ b/.idea/misc.xml	(date 1669030078910)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ExternalStorageConfigurationManager" enabled="true" />
+  <component name="FrameworkDetectionExcludesConfiguration">
+    <file type="web" url="file://$PROJECT_DIR$" />
+  </component>
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" default="true" project-jdk-name="corretto-17" project-jdk-type="JavaSDK" />
+</project>
\ No newline at end of file
Index: src/main/java/com/example/project/users.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/users.csv b/src/main/java/com/example/project/users.csv
new file mode 100644
--- /dev/null	(date 1669920448910)
+++ b/src/main/java/com/example/project/users.csv	(date 1669920448910)
@@ -0,0 +1,2 @@
+username,password
+test,test
Index: src/main/java/com/example/project/questions.csv
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/questions.csv b/src/main/java/com/example/project/questions.csv
new file mode 100644
--- /dev/null	(date 1669920448914)
+++ b/src/main/java/com/example/project/questions.csv	(date 1669920448914)
@@ -0,0 +1,3 @@
+identifier,text,type
+1,Cerul este albastru,single
+2,Temperatura se poate măsura în,single
Index: src/test/java/com/example/project/TestTema1.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.project;\r\n\r\nimport static org.junit.jupiter.api.Assertions.assertEquals;\r\n\r\nimport org.junit.jupiter.api.DisplayName;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.junit.jupiter.params.ParameterizedTest;\r\nimport org.junit.jupiter.params.provider.CsvSource;\r\n\r\nimport java.io.*;\r\n\r\npublic class TestTema1\r\n{\r\n\r\n   @Test\r\n   public void testDummy()\r\n   {\r\n     PrintStream originalOut = System.out;\r\n     ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n     System.setOut(new PrintStream(bos));\r\n\r\n     // action\r\n     Tema1.main(null);\r\n\r\n     // assertion\r\n     assertEquals(\"Hello world!\", bos.toString().trim());\r\n\r\n     // undo the binding in System\r\n     System.setOut(originalOut);\r\n   }\r\n\r\n    //region 1 Creare utilizator\r\n   @Test\r\n   public void testCreateUserUserAlreadyExists()\r\n   {\r\n       PrintStream originalOut = System.out;\r\n       ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n       System.setOut(new PrintStream(bos));\r\n\r\n       // action\r\n       Tema1.main(new String[]{\"-create-user\", \"-u 'uchii_cu_cel'\", \"-p 'unghii2022'\"});\r\n\r\n       // assertion\r\n       assertEquals(\"{ 'status' : 'ok', 'message' : 'User created successfully'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n               bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n       // action\r\n       Tema1.main(new String[]{\"-create-user\", \"-u 'uchii_cu_cel'\", \"-p 'unghii2022'\"});\r\n\r\n       // assertion\r\n       assertEquals(\"{ 'status' : 'error', 'message' : 'User already exists'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n               bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n       // undo the binding in System\r\n       System.setOut(originalOut);\r\n\r\n       // action\r\n       Tema1.main(new String[]{\"-cleanup-all\"});\r\n   }\r\n\r\n    @Test\r\n    public void testCreateUserNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Please provide username'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateUserNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'uchii_cu_cel'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Please provide password'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateUserUserCreatedSuccesfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'uchii_cu_cel'\", \"-p 'unghii2022'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'ok', 'message' : 'User created successfully'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    //endregion\r\n\r\n    //region 2 Creare întrebare\r\n    @Test\r\n    public void testCreateQuestionNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuestionNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuestionUsernameDoesNotExists()\r\n    {\r\n      PrintStream originalOut = System.out;\r\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n      System.setOut(new PrintStream(bos));\r\n\r\n      // action\r\n      Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n      // assertion\r\n      assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                    bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n      // undo the binding in System\r\n      System.setOut(originalOut);\r\n\r\n      // action\r\n      Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuestionLoginCredentialsAreWrong()\r\n    {\r\n      PrintStream originalOut = System.out;\r\n      ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n      System.setOut(new PrintStream(bos));\r\n\r\n      // action\r\n      Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n      // action\r\n      Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n      // assertion\r\n      assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                    bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n      // undo the binding in System\r\n      System.setOut(originalOut);\r\n\r\n      // action\r\n      Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuestionWithExistingName()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct 1\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct 1\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Question already exists'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionHasNoAnswers()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No answer provided'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionHasOnlyOneAnswer()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Only one answer provided'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionHasNoText()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No question text provided'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSingleAnswerQuestionHasMultipleCorrectAnswers()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\",\"-answer-2 'No'\", \"-answer-2-is-correct '1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Single correct answer question has more than one correct answer'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionDuplicateAnswers()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\",\"-answer-2 'Yes'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Same answer provided more than once'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionAnswerHasNoDescription()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\", \"-answer-1-is-correct 1\",\"-answer-2 'Yes'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Answer 1 has no answer description'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testQuestionAnswerHasNoAnswerFlag()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\",\"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Answer 1 has no answer correct flag'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuestionSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Question added successfully'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region 3 Întoarce identificator întrebare după nume\r\n    @Test\r\n    public void testGetQuestionNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuestionNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuestionUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuestionLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuestionNotFound()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        //action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\", \"-u 'test'\", \"-p 'test'\", \"-text 'Cerul este albastru'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Question does not exist'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuestionSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        Tema1.main(new String[]{\"–get-question-id-by-text\", \"-u 'test'\", \"-p 'test'\", \"-text 'Cerul este albastru'\"});\r\n\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '1'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–cleanup-all\"});\r\n    }\r\n    //endregion\r\n\r\n    //region 4 Întoarce toate întrebările din system\r\n    @Test\r\n    public void testGetAllQuestionsNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-questions\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuestionsNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-questions\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuestionsUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-questions\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuestionsLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-questions\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuestionsSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-questions\", \"-u 'test'\", \"-p 'test'\"});\r\n        //assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '[{\\\"question_id\\\" : \\\"1\\\", \\\"question_name\\\" : \\\"Cerul este albastru\\\"}, {\\\"question_id\\\": \\\"2\\\", \\\"question_name\\\" : \\\"Temperatura se poate măsura în\\\"}]}'\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\", \"'\"));\r\n\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region 5 Creare chestionar\r\n\r\n    @Test\r\n    public void testCreateQuizNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizNameAlreadyExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        //action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Quizz name already exists'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizQuestionIdDoesNotExist()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Question ID for question 2 does not exist'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testCreateQuizSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct 1\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct 1\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Quizz added succesfully'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n\r\n    }\r\n    //endregion\r\n\r\n    //region 6 Întoarce identificator chestionar după nume\r\n\r\n    @Test\r\n    public void testGetQuizNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizNotFound()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        //action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\", \"-u 'test'\", \"-p 'test'\", \"-text 'Chestionarul 1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Quizz does not exist'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–get-quizz-by-name\", \"-u 'test'\", \"-p 'test'\", \"-text 'Chestionarul 1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '1'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    //endregion\r\n\r\n    //region 7 Întoarce toate chestionarele din system\r\n    @Test\r\n    public void testGetAllQuizezNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-quizzes\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuizezNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-quizzes\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuizezUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-quizzes\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuizezLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-all-quizzes\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetAllQuizezSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Intrebarea 3'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Intrebarea 4'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 2'\", \"-question-1 '3'\", \"-question-2 '4'\"});\r\n\r\n\r\n        Tema1.main(new String[]{\"–get-all-quizzes\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '[{\\\"quizz_id\\\" : \\\"1\\\", \\\"quizz_name\\\" : \\\"Chestionarul 1\\\", \\\"is_completed\\\" : False}, {\\\"quizz_id\\\" : \\\"2\\\", \\\"quizz_name\\\" : \\\"Chestionarul 2\\\", \\\"is_completed\\\" : \\\"False\\\"}]'\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n    //endregion\r\n\r\n    //region 8 Întoarce detaliile unui chestionar în funcție de identificatory java\r\n\r\n    @Test\r\n    public void testGetQuizDetailsNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-details-by-id\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizDetailsNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-details-by-id\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizDetailsUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-details-by-id\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetQuizDetailsLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-quizz-details-by-id\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testGetQuizDetailsSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test2'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–get-quizz-details-by-id\", \"-u 'test'\", \"-p 'test'\", \"-id '1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '[{\\\"question-name\\\":\\\"Cerul este albastru\\\", \\\"question_index\\\":\\\"1\\\", \\\"question_type\\\":\\\"single\\\", \\\"answers\\\":\\\"[{\\\"answer_name\\\":\\\"Yes\\\", \\\"answer_id\\\":\\\"1\\\"}, {\\\"answer_name\\\":\\\"No\\\", \\\"answer_id\\\":\\\"2\\\"}]'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    //endregion\r\n\r\n    //region 9 Încarcă răspunsuri chestionar\r\n    @Test\r\n    public void testSubmitQuizNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–submit-quizz\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuizNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuizUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuizLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuizNoId()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testSubmitQuizNotFound()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\", \"quiz-id '2'\", \"-answer-id-1 '1'\", \"-answer-id-2 '3'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No quiz was found'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testSubmitQuizSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\", \"quiz-id '1'\", \"-answer-id-1 '1'\", \"-answer-id-2 '3'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '100 points'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuizAnsweredWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\", \"quiz-id '1'\", \"-answer-id-1 '2'\", \"-answer-id-2 '4'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '0 points'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuiz2Of3QuestionsAnswered()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'multiple'\",\"-answer-1 'Celsius'\", \"-answer-1-is-correct '1'\", \"-answer-2 'Litri'\", \"-answer-2-is-correct '0'\", \"-answer-3 'Fahrenheit'\", \"-answer-3-is-correct '1'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Urmatoarele sunt animale de companie'\", \"-type 'multiple'\",\"-answer-1 'Caine'\", \"-answer-1-is-correct '1'\", \"-answer-2 'Grifon'\", \"-answer-2-is-correct '0'\", \"-answer-3 'Pisica'\", \"-answer-3-is-correct '1'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\", \"-question-3 '3'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\", \"quiz-id '1'\", \"-answer-id-1 '3'\", \"-answer-id-2 '5'\", \"-answer-id-3 '6'\", \"-answer-id-4 '8'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '67 points'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testSubmitQuiz1QuestionAnsweredWrong2QuestionsAnsweredCorectly()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'multiple'\",\"-answer-1 'Celsius'\", \"-answer-1-is-correct '1'\", \"-answer-2 'Litri'\", \"-answer-2-is-correct '0'\", \"-answer-3 'Fahrenheit'\", \"-answer-3-is-correct '1'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Urmatoarele sunt animale de companie'\", \"-type 'multiple'\",\"-answer-1 'Caine'\", \"-answer-1-is-correct '1'\", \"-answer-2 'Grifon'\", \"-answer-2-is-correct '0'\", \"-answer-3 'Pisica'\", \"-answer-3-is-correct '1'\"});\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\", \"-question-3 '3'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test2'\", \"quiz-id '1'\", \"-answer-id-1 '2'\", \"-answer-id-2 '3'\", \"-answer-id-3 '5'\", \"-answer-id-4 '6'\", \"-answer-id-5 '8'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '33 points'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n    //endregion\r\n\r\n    //region 10 Ștergere chestionar\r\n    @Test\r\n    public void testDeleteQuizNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testDeleteQuizNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testDeleteQuizUsernameDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testDeleteQuizLoginCredentialsAreWrong()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testDeleteQuizNoId()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testDeleteQuizNotFound()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\", \"-p -'test2'\", \"-id '2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'No quiz was found'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n\r\n    @Test\r\n    public void testDeleteQuizSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–delete-quizz-by-id\", \"-u 'test'\", \"-p -'test2'\", \"-id '1'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Quizz deleted successfully'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    //endregion\r\n\r\n\r\n    //region 11 Întoarce soluțiile mele\r\n    @Test\r\n    public void testGetSolutionsNoUsername()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-my-solutions\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetSolutionsNoPassword()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-my-solutions\", \"-u test\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'You need to be authenticated'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetSolutionsUserDoesNotExists()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-my-solutions\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetSolutionsWrongCredentials()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–get-my-solutions\", \"-u 'test'\", \"-p -'test2'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : 'Login failed'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    @Test\r\n    public void testGetSolutionsSuccessfully()\r\n    {\r\n        PrintStream originalOut = System.out;\r\n        ByteArrayOutputStream bos = new ByteArrayOutputStream();\r\n        System.setOut(new PrintStream(bos));\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-create-user\", \"-u 'test'\", \"-p 'test'\"});\r\n\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Cerul este albastru'\", \"-type 'single'\",\"-answer-1 'Yes'\", \"-answer-1-is-correct '1'\", \"-answer-2 'No'\", \"-answer-2-is-correct '0'\"});\r\n        // action\r\n        Tema1.main(new String[]{\"–create-question\", \"-u 'test'\", \"-p -'test'\", \"-text 'Temperatura se poate măsura în'\", \"-type 'single'\",\"-answer-1 'C'\", \"-answer-1-is-correct '1'\", \"-answer-2 'L'\", \"-answer-2-is-correct '0'\"});\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"–create-quizz\", \"-u 'test'\", \"-p -'test'\", \"-name 'Chestionarul 1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–submit-quizz\", \"-u 'test'\", \"-p -'test'\", \"-quiz-id '1'\", \"-question-1 '1'\", \"-question-2 '2'\"});\r\n\r\n        Tema1.main(new String[]{\"–get-my-solutions\", \"-u 'test'\", \"-p -'test'\"});\r\n\r\n        // assertion\r\n        assertEquals(\"{ 'status' : 'error', 'message' : '[{\\\"quiz-id\\\" : \\\"1\\\", \\\"quiz-name\\\" : \\\"Chestionarul 1\\\", \\\"score\\\" : \\\"100\\\", \\\"index_in_list\\\" : \\\"1\\\"}]'}\".replace(\"' \", \"'\").replace(\" '\",\"'\"),\r\n                bos.toString().trim().replace(\"' \", \"'\").replace(\" '\",\"'\"));\r\n\r\n        // undo the binding in System\r\n        System.setOut(originalOut);\r\n\r\n        // action\r\n        Tema1.main(new String[]{\"-cleanup-all\"});\r\n    }\r\n\r\n    //endregion\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/com/example/project/TestTema1.java b/src/test/java/com/example/project/TestTema1.java
--- a/src/test/java/com/example/project/TestTema1.java	(revision 5da4e4958b36dd206002ceaa2566a0bf6e863464)
+++ b/src/test/java/com/example/project/TestTema1.java	(date 1669903220631)
@@ -1,62 +1,71 @@
 package com.example.project;
 
-import static org.junit.jupiter.api.Assertions.assertEquals;
-
-import org.junit.jupiter.api.DisplayName;
 import org.junit.jupiter.api.Test;
-import org.junit.jupiter.params.ParameterizedTest;
-import org.junit.jupiter.params.provider.CsvSource;
 
-import java.io.*;
+import java.io.ByteArrayOutputStream;
+import java.io.PrintStream;
+
+import static org.junit.jupiter.api.Assertions.assertEquals;
 
 public class TestTema1
 {
 
-   @Test
-   public void testDummy()
-   {
-     PrintStream originalOut = System.out;
-     ByteArrayOutputStream bos = new ByteArrayOutputStream();
-     System.setOut(new PrintStream(bos));
+    @Test
+    public void testDummy()
+    {
+        PrintStream originalOut = System.out;
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-     // action
-     Tema1.main(null);
+        // action
+        Tema1.main(null);
 
-     // assertion
-     assertEquals("Hello world!", bos.toString().trim());
+
+        //System.out.println(bos.toString().trim());
+        // assertion
+        assertEquals("Hello world!", bos.toString().trim());
+        //assertEquals(true, true);
 
-     // undo the binding in System
-     System.setOut(originalOut);
-   }
+        // undo the binding in System
+        System.setOut(originalOut);
+    }
 
     //region 1 Creare utilizator
-   @Test
-   public void testCreateUserUserAlreadyExists()
-   {
-       PrintStream originalOut = System.out;
-       ByteArrayOutputStream bos = new ByteArrayOutputStream();
-       System.setOut(new PrintStream(bos));
+    @Test
+    public void testCreateUserUserAlreadyExists()
+    {
+        PrintStream originalOut = System.out;
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-       // action
-       Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2022'"});
+        // action
+        Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2022'"});
 
-       // assertion
-       assertEquals("{ 'status' : 'ok', 'message' : 'User created successfully'}".replace("' ", "'").replace(" '","'"),
-               bos.toString().trim().replace("' ", "'").replace(" '","'"));
+        // assertion
+//       assertEquals("{ 'status' : 'ok', 'message' : 'User created successfully'}".replace("' ", "'").replace(" '","'"),
+//               bos.toString().trim().replace("' ", "'").replace(" '","'"));
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-       // action
-       Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2022'"});
+        // action
+
+        Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2022'"});
 
-       // assertion
-       assertEquals("{ 'status' : 'error', 'message' : 'User already exists'}".replace("' ", "'").replace(" '","'"),
-               bos.toString().trim().replace("' ", "'").replace(" '","'"));
+        // assertion
+        assertEquals("{ 'status' : 'error', 'message' : 'User already exists'}".replace("' ", "'").replace(" '","'"),
+                bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
-       // undo the binding in System
-       System.setOut(originalOut);
+        // undo the binding in System
+        System.setOut(originalOut);
 
-       // action
-       Tema1.main(new String[]{"-cleanup-all"});
-   }
+        // action
+        Tema1.main(new String[]{"-cleanup-all"});
+    }
 
     @Test
     public void testCreateUserNoUsername()
@@ -64,13 +73,17 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Please provide username'}".replace("' ", "'").replace(" '","'"),
-                bos.toString().replace("' ", "'").replace(" '","'"));
+                bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
         System.setOut(originalOut);
@@ -85,6 +98,10 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'"});
@@ -106,6 +123,10 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'uchii_cu_cel'", "-p 'unghii2022'"});
@@ -131,6 +152,10 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-question"});
@@ -153,6 +178,10 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-question", "-u 'test'"});
 
@@ -170,46 +199,57 @@
     @Test
     public void testCreateQuestionUsernameDoesNotExists()
     {
-      PrintStream originalOut = System.out;
-      ByteArrayOutputStream bos = new ByteArrayOutputStream();
-      System.setOut(new PrintStream(bos));
+        PrintStream originalOut = System.out;
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-      // action
-      Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'"});
+        // action
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'"});
 
-      // assertion
-      assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
-                    bos.toString().trim().replace("' ", "'").replace(" '","'"));
+        // assertion
+        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
+                bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
-      // undo the binding in System
-      System.setOut(originalOut);
+        // undo the binding in System
+        System.setOut(originalOut);
 
-      // action
-      Tema1.main(new String[]{"-cleanup-all"});
+        // action
+        Tema1.main(new String[]{"-cleanup-all"});
     }
 
     @Test
     public void testCreateQuestionLoginCredentialsAreWrong()
     {
-      PrintStream originalOut = System.out;
-      ByteArrayOutputStream bos = new ByteArrayOutputStream();
-      System.setOut(new PrintStream(bos));
+        PrintStream originalOut = System.out;
+        ByteArrayOutputStream bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-      // action
-      Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
+        // action
+        Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-      // action
-      Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test2'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        // action
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test2'"});
 
-      // assertion
-      assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
-                    bos.toString().trim().replace("' ", "'").replace(" '","'"));
+        // assertion
+        assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
+                bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
-      // undo the binding in System
-      System.setOut(originalOut);
+        // undo the binding in System
+        System.setOut(originalOut);
 
-      // action
-      Tema1.main(new String[]{"-cleanup-all"});
+        // action
+        Tema1.main(new String[]{"-cleanup-all"});
     }
 
     @Test
@@ -219,15 +259,25 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct 1", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct 1", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Question already exists'}".replace("' ", "'").replace(" '","'"),
@@ -247,12 +297,18 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No answer provided'}".replace("' ", "'").replace(" '","'"),
@@ -271,13 +327,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Only one answer provided'}".replace("' ", "'").replace(" '","'"),
@@ -296,13 +358,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No question text provided'}".replace("' ", "'").replace(" '","'"),
@@ -321,13 +389,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'","-answer-2 'No'", "-answer-2-is-correct '1'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'","-answer-2 'No'", "-answer-2-is-correct '1'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Single correct answer question has more than one correct answer'}".replace("' ", "'").replace(" '","'"),
@@ -347,13 +421,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'","-answer-2 'Yes'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1 'Yes'", "-answer-1-is-correct '1'","-answer-2 'Yes'", "-answer-2-is-correct '0'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Same answer provided more than once'}".replace("' ", "'").replace(" '","'"),
@@ -372,13 +452,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1-is-correct 1","-answer-2 'Yes'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'", "-answer-1-is-correct '1'","-answer-2 'Yes'", "-answer-2-is-correct '0'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Answer 1 has no answer description'}".replace("' ", "'").replace(" '","'"),
@@ -397,13 +483,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'","-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'","-answer-2 'No'", "-answer-2-is-correct '0'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Answer 1 has no answer correct flag'}".replace("' ", "'").replace(" '","'"),
@@ -422,16 +514,22 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : 'Question added successfully'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : 'Question added successfully'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -450,9 +548,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-question-id-by-text"});
+        Tema1.main(new String[]{"-get-question-id-by-text"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -471,9 +573,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-question-id-by-text", "-u 'test'"});
+        Tema1.main(new String[]{"-get-question-id-by-text", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -493,8 +599,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-question-id-by-text", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-question-id-by-text", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -513,12 +623,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-question-id-by-text", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-question-id-by-text", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -537,12 +654,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         //action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-question-id-by-text", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'"});
+        Tema1.main(new String[]{"-get-question-id-by-text", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Question does not exist'}".replace("' ", "'").replace(" '","'"),
@@ -561,25 +685,35 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-user", "-u 'test'", "-p 'test'"});
+        Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
 
-        Tema1.main(new String[]{"–get-question-id-by-text", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-get-question-id-by-text", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'"});
 
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '1'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '1'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
         System.setOut(originalOut);
 
         // action
-        Tema1.main(new String[]{"–cleanup-all"});
+        Tema1.main(new String[]{"-cleanup-all"});
     }
     //endregion
 
@@ -590,9 +724,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-questions"});
+        Tema1.main(new String[]{"-get-all-questions"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -611,9 +749,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-questions", "-u 'test'"});
+        Tema1.main(new String[]{"-get-all-questions", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -632,9 +774,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-questions", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-all-questions", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -653,12 +799,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-all-questions", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-all-questions", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -678,16 +831,32 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-all-questions", "-u 'test'", "-p 'test'"});
+        Tema1.main(new String[]{"-get-all-questions", "-u 'test'", "-p 'test'"});
         //assertion
-        assertEquals("{ 'status' : 'error', 'message' : '[{\"question_id\" : \"1\", \"question_name\" : \"Cerul este albastru\"}, {\"question_id\": \"2\", \"question_name\" : \"Temperatura se poate măsura în\"}]}'".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '[{\"question_id\" : \"1\", \"question_name\" : \"Cerul este albastru\"}, {\"question_id\" : \"2\", \"question_name\" : \"Temperatura se poate măsura în\"}]'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '", "'"));
 
 
@@ -708,9 +877,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz"});
+        Tema1.main(new String[]{"-create-quizz"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -730,8 +903,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -750,9 +927,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -772,11 +953,18 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -795,20 +983,36 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         //action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Quizz name already exists'}".replace("' ", "'").replace(" '","'"),
@@ -827,15 +1031,24 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Question ID for question 2 does not exist'}".replace("' ", "'").replace(" '","'"),
@@ -854,19 +1067,33 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct 1", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct 1", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : 'Quizz added succesfully'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : 'Quizz added succesfully'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -886,9 +1113,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-quizz-by-name"});
+        Tema1.main(new String[]{"-get-quizz-by-name"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -908,8 +1139,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-quizz-by-name", "-u 'test'"});
+        Tema1.main(new String[]{"-get-quizz-by-name", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -928,9 +1163,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-quizz-by-name", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-quizz-by-name", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -949,12 +1188,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-quizz-by-name", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-quizz-by-name", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -974,11 +1220,18 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         //action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-quizz-by-name", "-u 'test'", "-p 'test'", "-text 'Chestionarul 1'"});
+        Tema1.main(new String[]{"-get-quizz-by-name", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Quizz does not exist'}".replace("' ", "'").replace(" '","'"),
@@ -997,21 +1250,38 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–get-quizz-by-name", "-u 'test'", "-p 'test'", "-text 'Chestionarul 1'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-get-quizz-by-name", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '1'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '1'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1030,9 +1300,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-quizzes"});
+        Tema1.main(new String[]{"-get-all-quizzes"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1051,9 +1325,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-quizzes", "-u 'test'"});
+        Tema1.main(new String[]{"-get-all-quizzes", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1072,9 +1350,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-all-quizzes", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-all-quizzes", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1093,12 +1375,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-all-quizzes", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-all-quizzes", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1117,32 +1406,56 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Intrebarea 3'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Intrebarea 3'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Intrebarea 4'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Intrebarea 4'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 2'", "-question-1 '3'", "-question-2 '4'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 2'", "-question-1 '3'", "-question-2 '4'"});
 
-        Tema1.main(new String[]{"–get-all-quizzes", "-u 'test'", "-p -'test'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-get-all-quizzes", "-u 'test'", "-p 'test'"});
 
 
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '[{\"quizz_id\" : \"1\", \"quizz_name\" : \"Chestionarul 1\", \"is_completed\" : False}, {\"quizz_id\" : \"2\", \"quizz_name\" : \"Chestionarul 2\", \"is_completed\" : \"False\"}]'".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '[{\"quizz_id\" : \"1\", \"quizz_name\" : \"Chestionarul 1\", \"is_completed\" : \"False\"}, {\"quizz_id\" : \"2\", \"quizz_name\" : \"Chestionarul 2\", \"is_completed\" : \"False\"}]'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1161,9 +1474,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-quizz-details-by-id"});
+        Tema1.main(new String[]{"-get-quizz-details-by-id"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1182,9 +1499,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-quizz-details-by-id", "-u 'test'"});
+        Tema1.main(new String[]{"-get-quizz-details-by-id", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1204,8 +1525,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-quizz-details-by-id", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-quizz-details-by-id", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1224,12 +1549,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-quizz-details-by-id", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-quizz-details-by-id", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1250,20 +1582,37 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test2'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–get-quizz-details-by-id", "-u 'test'", "-p 'test'", "-id '1'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-get-quizz-details-by-id", "-u 'test'", "-p 'test'", "-id '1'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '[{\"question-name\":\"Cerul este albastru\", \"question_index\":\"1\", \"question_type\":\"single\", \"answers\":\"[{\"answer_name\":\"Yes\", \"answer_id\":\"1\"}, {\"answer_name\":\"No\", \"answer_id\":\"2\"}]'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{'status':'ok','message':'[{\"question-name\":\"Cerul este albastru\", \"question_index\":\"1\", \"question_type\":\"single\", \"answers\":\"[{\"answer_name\":\"Yes\", \"answer_id\":\"1\"}, {\"answer_name\":\"No\", \"answer_id\":\"2\"}]\"}, {\"question-name\":\"Temperatura se poate măsura în\", \"question_index\":\"2\", \"question_type\":\"single\", \"answers\":\"[{\"answer_name\":\"C\", \"answer_id\":\"3\"}, {\"answer_name\":\"L\", \"answer_id\":\"4\"}]\"}]'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1283,9 +1632,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–submit-quizz"});
+        Tema1.main(new String[]{"-submit-quizz"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1304,9 +1657,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'"});
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1325,9 +1682,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1346,12 +1707,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1370,12 +1738,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}".replace("' ", "'").replace(" '","'"),
@@ -1396,17 +1771,34 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'", "quiz-id '2'", "-answer-id-1 '1'", "-answer-id-2 '3'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test'", "-p 'test'", "-quiz-id '2'", "-answer-id-1 '1'", "-answer-id-2 '3'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No quiz was found'}".replace("' ", "'").replace(" '","'"),
@@ -1426,21 +1818,43 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'", "quiz-id '1'", "-answer-id-1 '1'", "-answer-id-2 '3'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test2'", "-p 'test2'", "-quiz-id '1'", "-answer-id-1 '1'", "-answer-id-2 '3'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '100 points'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '100 points'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1457,20 +1871,42 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'", "quiz-id '1'", "-answer-id-1 '2'", "-answer-id-2 '4'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test2'", "-p 'test2'", "-quiz-id '1'", "-answer-id-1 '2'", "-answer-id-2 '4'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '0 points'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '0 points'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1486,24 +1922,48 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'multiple'","-answer-1 'Celsius'", "-answer-1-is-correct '1'", "-answer-2 'Litri'", "-answer-2-is-correct '0'", "-answer-3 'Fahrenheit'", "-answer-3-is-correct '1'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'multiple'","-answer-1 'Celsius'", "-answer-1-is-correct '1'", "-answer-2 'Litri'", "-answer-2-is-correct '0'", "-answer-3 'Fahrenheit'", "-answer-3-is-correct '1'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Urmatoarele sunt animale de companie'", "-type 'multiple'","-answer-1 'Caine'", "-answer-1-is-correct '1'", "-answer-2 'Grifon'", "-answer-2-is-correct '0'", "-answer-3 'Pisica'", "-answer-3-is-correct '1'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Urmatoarele sunt animale de companie'", "-type 'multiple'","-answer-1 'Caine'", "-answer-1-is-correct '1'", "-answer-2 'Grifon'", "-answer-2-is-correct '0'", "-answer-3 'Pisica'", "-answer-3-is-correct '1'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'", "-question-3 '3'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'", "-question-3 '3'"});
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'", "quiz-id '1'", "-answer-id-1 '3'", "-answer-id-2 '5'", "-answer-id-3 '6'", "-answer-id-4 '8'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test2'", "-p 'test2'", "-quiz-id '1'", "-answer-id-1 '3'", "-answer-id-2 '5'", "-answer-id-3 '6'", "-answer-id-4 '8'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '67 points'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '67 points'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1519,24 +1979,48 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'multiple'","-answer-1 'Celsius'", "-answer-1-is-correct '1'", "-answer-2 'Litri'", "-answer-2-is-correct '0'", "-answer-3 'Fahrenheit'", "-answer-3-is-correct '1'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'multiple'","-answer-1 'Celsius'", "-answer-1-is-correct '1'", "-answer-2 'Litri'", "-answer-2-is-correct '0'", "-answer-3 'Fahrenheit'", "-answer-3-is-correct '1'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Urmatoarele sunt animale de companie'", "-type 'multiple'","-answer-1 'Caine'", "-answer-1-is-correct '1'", "-answer-2 'Grifon'", "-answer-2-is-correct '0'", "-answer-3 'Pisica'", "-answer-3-is-correct '1'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Urmatoarele sunt animale de companie'", "-type 'multiple'","-answer-1 'Caine'", "-answer-1-is-correct '1'", "-answer-2 'Grifon'", "-answer-2-is-correct '0'", "-answer-3 'Pisica'", "-answer-3-is-correct '1'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'", "-question-3 '3'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'", "-question-3 '3'"});
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test2'", "quiz-id '1'", "-answer-id-1 '2'", "-answer-id-2 '3'", "-answer-id-3 '5'", "-answer-id-4 '6'", "-answer-id-5 '8'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test2'", "-p 'test2'", "-quiz-id '1'", "-answer-id-1 '2'", "-answer-id-2 '3'", "-answer-id-3 '5'", "-answer-id-4 '6'", "-answer-id-5 '8'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '33 points'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '33 points'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1554,9 +2038,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–delete-quizz-by-id"});
+        Tema1.main(new String[]{"-delete-quizz-by-id"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1575,9 +2063,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'"});
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1597,8 +2089,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1617,12 +2113,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1642,11 +2145,18 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No quizz identifier was provided'}".replace("' ", "'").replace(" '","'"),
@@ -1666,18 +2176,35 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'", "-p -'test2'", "-id '2'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'", "-p 'test'", "-id '2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'No quiz was found'}".replace("' ", "'").replace(" '","'"),
@@ -1698,20 +2225,37 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
 
-        Tema1.main(new String[]{"–delete-quizz-by-id", "-u 'test'", "-p -'test2'", "-id '1'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-delete-quizz-by-id", "-u 'test'", "-p 'test'", "-id '1'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : 'Quizz deleted successfully'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : 'Quizz deleted successfully'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1732,9 +2276,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-my-solutions"});
+        Tema1.main(new String[]{"-get-my-solutions"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1754,9 +2301,12 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-my-solutions", "-u test"});
+        Tema1.main(new String[]{"-get-my-solutions", "-u test"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'You need to be authenticated'}".replace("' ", "'").replace(" '","'"),
@@ -1775,9 +2325,13 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–get-my-solutions", "-u 'test'", "-p -'test'"});
+        Tema1.main(new String[]{"-get-my-solutions", "-u 'test'", "-p 'test'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1796,12 +2350,19 @@
         PrintStream originalOut = System.out;
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–get-my-solutions", "-u 'test'", "-p -'test2'"});
+        Tema1.main(new String[]{"-get-my-solutions", "-u 'test'", "-p 'test2'"});
 
         // assertion
         assertEquals("{ 'status' : 'error', 'message' : 'Login failed'}".replace("' ", "'").replace(" '","'"),
@@ -1821,22 +2382,47 @@
         ByteArrayOutputStream bos = new ByteArrayOutputStream();
         System.setOut(new PrintStream(bos));
 
+        Tema1.main(new String[]{"-cleanup-all"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
         Tema1.main(new String[]{"-create-user", "-u 'test'", "-p 'test'"});
 
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-user", "-u 'test2'", "-p 'test2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Cerul este albastru'", "-type 'single'","-answer-1 'Yes'", "-answer-1-is-correct '1'", "-answer-2 'No'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
         // action
-        Tema1.main(new String[]{"–create-question", "-u 'test'", "-p -'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+        Tema1.main(new String[]{"-create-question", "-u 'test'", "-p 'test'", "-text 'Temperatura se poate măsura în'", "-type 'single'","-answer-1 'C'", "-answer-1-is-correct '1'", "-answer-2 'L'", "-answer-2-is-correct '0'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
         // action
-        Tema1.main(new String[]{"–create-quizz", "-u 'test'", "-p -'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-create-quizz", "-u 'test'", "-p 'test'", "-name 'Chestionarul 1'", "-question-1 '1'", "-question-2 '2'"});
+
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
 
-        Tema1.main(new String[]{"–submit-quizz", "-u 'test'", "-p -'test'", "-quiz-id '1'", "-question-1 '1'", "-question-2 '2'"});
+        Tema1.main(new String[]{"-submit-quizz", "-u 'test2'", "-p 'test2'", "-quiz-id '1'", "-answer-id-1 '1'", "-answer-id-2 '3'"});
 
-        Tema1.main(new String[]{"–get-my-solutions", "-u 'test'", "-p -'test'"});
+        bos = new ByteArrayOutputStream();
+        System.setOut(new PrintStream(bos));
+
+        Tema1.main(new String[]{"-get-my-solutions", "-u 'test2'", "-p 'test2'"});
 
         // assertion
-        assertEquals("{ 'status' : 'error', 'message' : '[{\"quiz-id\" : \"1\", \"quiz-name\" : \"Chestionarul 1\", \"score\" : \"100\", \"index_in_list\" : \"1\"}]'}".replace("' ", "'").replace(" '","'"),
+        assertEquals("{ 'status' : 'ok', 'message' : '[{\"quiz-id\" : \"1\", \"quiz-name\" : \"Chestionarul 1\", \"score\" : \"100\", \"index_in_list\" : \"1\"}]'}".replace("' ", "'").replace(" '","'"),
                 bos.toString().trim().replace("' ", "'").replace(" '","'"));
 
         // undo the binding in System
@@ -1847,4 +2433,4 @@
     }
 
     //endregion
-}
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\r\n\tid 'java'\r\n}\r\n\r\nrepositories {\r\n\tmavenCentral()\r\n}\r\n\r\ndependencies {\r\n\ttestImplementation('org.junit.jupiter:junit-jupiter:5.6.0')\r\n}\r\n\r\ntest {\r\n\tuseJUnitPlatform()\r\n\ttestLogging {\r\n\t\tevents \"passed\", \"skipped\", \"failed\"\r\n\t}\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build.gradle b/build.gradle
--- a/build.gradle	(revision 5da4e4958b36dd206002ceaa2566a0bf6e863464)
+++ b/build.gradle	(date 1669740296179)
@@ -7,7 +7,9 @@
 }
 
 dependencies {
-	testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
+	implementation 'org.jetbrains:annotations:20.1.0'
+    testImplementation('org.junit.jupiter:junit-jupiter:5.6.0')
+	implementation group: 'com.opencsv', name: 'opencsv', version: '5.2'
 }
 
 test {
Index: .idea/jsonCatalog.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jsonCatalog.xml b/.idea/jsonCatalog.xml
new file mode 100644
--- /dev/null	(date 1669028804176)
+++ b/.idea/jsonCatalog.xml	(date 1669028804176)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JsonSchemaCatalogProjectConfiguration">
+    <preferRemoteSchemas>true</preferRemoteSchemas>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jsonSchemas.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jsonSchemas.xml b/.idea/jsonSchemas.xml
new file mode 100644
--- /dev/null	(date 1669331966175)
+++ b/.idea/jsonSchemas.xml	(date 1669331966175)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="JsonSchemaMappingsProjectConfiguration">
+    <state>
+      <map>
+        <entry key="JSON Schema version 7">
+          <value>
+            <SchemaInfo>
+              <option name="name" value="JSON Schema version 7" />
+              <option name="relativePathToSchema" value="http://json-schema.org/draft-07/schema" />
+              <option name="schemaVersion" value="JSON Schema version 7" />
+              <option name="applicationDefined" value="true" />
+              <option name="patterns">
+                <list>
+                  <Item>
+                    <option name="path" value="src/main/java/com/example/project/users.json" />
+                  </Item>
+                </list>
+              </option>
+            </SchemaInfo>
+          </value>
+        </entry>
+      </map>
+    </state>
+  </component>
+</project>
\ No newline at end of file
Index: src/main/java/com/example/project/Question.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/Question.java b/src/main/java/com/example/project/Question.java
new file mode 100644
--- /dev/null	(date 1669917904506)
+++ b/src/main/java/com/example/project/Question.java	(date 1669917904506)
@@ -0,0 +1,376 @@
+package com.example.project;
+
+import com.opencsv.CSVWriter;
+
+import java.io.*;
+import java.util.ArrayList;
+
+public class Question implements Comparable<String> {
+
+    private final int identifier;
+    private final String text;
+
+    ArrayList<Answer> answers;
+
+    private final String type;
+    private static int number_of_questions = 0;
+
+    static class Answer implements Comparable<Answer> {
+
+        private final int identifier;
+        private final String text;
+        private final boolean correct;
+
+        private static int number_of_answers = 0;
+
+        public Answer(String text, boolean correct) {
+            number_of_answers++;
+            this.identifier = number_of_answers;
+            this.text = text;
+            this.correct = correct;
+        }
+
+        public Answer() {
+            this.identifier = -1;
+            this.text = null;
+            this.correct = false;
+        }
+
+        public int getIdentifier() {
+            return this.identifier;
+        }
+
+        public String getText() {
+            return this.text;
+        }
+
+        public boolean checkCorrect() {
+            return this.correct;
+        }
+
+        public static void resetNumber_of_answers() {
+            number_of_answers = 0;
+        }
+
+        public int compareTo(Answer answer) {
+            return this.text.compareTo(answer.text);
+        }
+
+        public static int numberOfCorectAnswers(ArrayList<Answer> answers) {
+            int correct_answers = 0;
+            for (Answer answer : answers) {
+                if (answer.correct) {
+                    correct_answers++;
+                }
+            }
+            return correct_answers;
+        }
+
+        public static boolean checkDuplicateAnswers(ArrayList<Answer> answers) {
+            for (int i = 0; i < answers.size(); i++) {
+                for (int j = i + 1; j < answers.size(); j++) {
+                    if (answers.get(i).compareTo(answers.get(j)) == 0) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+
+        public static void writeAnswersToFile(String path, Question question) {
+            try {
+                File file = new File(path);
+                FileWriter fileWriter = new FileWriter(file, true);
+                char[] csvFlags = {CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER};
+                CSVWriter csvWriter = new CSVWriter(fileWriter, ',',csvFlags[0], csvFlags[1], "\n");
+
+                FileReader fr = new FileReader(file);
+                BufferedReader br = new BufferedReader(fr);
+                String read = br.readLine();
+                if(read == null) {
+                    String[] header = {"question_identifier", "identifier", "answer", "correct"};
+                    csvWriter.writeNext(header);
+                }
+                br.close();
+                fr.close();
+                for(int i = 0 ; i < question.answers.size(); i++) {
+                    String[] data = {String.valueOf(question.getIdentifier()), String.valueOf(question.answers.get(i).getIdentifier()),
+                                    question.answers.get(i).getText(), Boolean.toString(question.answers.get(i).checkCorrect())};
+
+                    csvWriter.writeNext(data);
+                }
+
+                csvWriter.close();
+                fileWriter.close();
+            }
+            catch (IOException e) {
+                e.printStackTrace();
+            }
+        }
+
+        public static String getAnswersByQuestionId(String path, String id) {
+            String answers = "";
+            try {
+                File file = new File(path);
+                FileReader fr = new FileReader(file);
+                BufferedReader br = new BufferedReader(fr);
+                String read = br.readLine();
+                if(read == null) {
+                    br.close();
+                    fr.close();
+                    return null;
+                }
+                read = br.readLine();
+                while (read != null) {
+                    String[] answers_info = read.split(",");
+                    String question_identifier = answers_info[0];
+                    String answer_identifier = answers_info[1];
+                    String name = answers_info[2];
+                    if(question_identifier.compareTo(id) == 0) {
+                        answers += answer_identifier + " " + name + "\n";
+                    }
+                    read = br.readLine();
+                }
+                br.close();
+                fr.close();
+            }
+            catch (IOException e) {
+                e.printStackTrace();
+            }
+            return answers;
+        }
+    }
+
+    public Question(String text, String type) {
+        this.text = text;
+        this.type = type;
+        number_of_questions++;
+        this.identifier = number_of_questions;
+        this.answers = new ArrayList<>();
+    }
+    //Constructors made just for testing purposes
+
+    public Question(String text) {
+        this.text = text;
+        this.identifier = -1;
+        this.type = null;
+    }
+    public Question(String text, int identifier) {
+        this.text = text;
+        this.identifier = identifier;
+        this.type = null;
+    }
+
+    public int getIdentifier() {
+        return this.identifier;
+    }
+
+    public String getText() {
+        return this.text;
+    }
+
+    public String getType() {
+        return this.type;
+    }
+
+    public static int getNumber_of_questions() {
+        return number_of_questions;
+    }
+
+    public void addAnswer(Answer answer) {
+        this.answers.add(answer);
+    }
+
+    public static void resetNumber_of_questions() {
+        number_of_questions = 0;
+    }
+
+    public int compareTo(String text) {
+        return this.text.compareTo(text);
+    }
+
+    public static int readQuestionsFromFile(String path, Question question) {
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if(read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            while (read != null) {
+
+                String questionText = read.substring(read.indexOf(",") + 1, read.lastIndexOf(","));
+                if(question.compareTo(questionText) == 0) {
+                    br.close();
+                    fr.close();
+                    return -2;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    public static int getQuestionIdentifier(String path, Question question) {
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if(read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            while (read != null) {
+
+                String questionText = read.substring(read.indexOf(",") + 1, read.lastIndexOf(","));
+                if(question.compareTo(questionText) == 0) {
+                    br.close();
+                    fr.close();
+                    return Integer.parseInt(read.substring(0, read.indexOf(",")));
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        return -2;
+    }
+
+    public static String writeQuestionsToFile(String path, Question question) {
+
+        try {
+            File file = new File(path);
+            FileWriter fileWriter = new FileWriter(file, true);
+            char[] csvFlags = {CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER};
+            CSVWriter csvWriter = new CSVWriter(fileWriter, ',',csvFlags[0], csvFlags[1], "\n");
+
+            int readQuestionsReturn = Question.readQuestionsFromFile(path, question);
+            if(readQuestionsReturn == -1) {
+                String[] header = {"identifier", "text", "type"};
+                csvWriter.writeNext(header);
+            }
+            if(readQuestionsReturn == -2) {
+                csvWriter.close();
+                fileWriter.close();
+                return "{ 'status' : 'error', 'message' : 'Question already exists'}";
+            }
+            String[] questionInfo = {String.valueOf(question.getIdentifier()), question.getText(), question.getType()};
+            csvWriter.writeNext(questionInfo);
+
+            csvWriter.close();
+            fileWriter.close();
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static String addAnswers(String[] args, Question question) {
+        for(int i = 5; i < args.length - 1; i += 2) {
+            int currentAnswerIndex = (i - 5) / 2 + 1;
+            if(args[i].contains("-is-correct")) {
+                return "{ 'status' : 'error', 'message' : 'Answer " + currentAnswerIndex + " has no answer description'}";
+            }
+            String[] answer_text = args[i].split(" ");
+            String answerText = MetodeTema.removeUselessCharacters(answer_text[1]);
+            if(!args[i+1].contains("is-correct")) {
+                return "{ 'status' : 'error', 'message' : 'Answer " + currentAnswerIndex + " has no answer correct flag'}";
+            }
+            String[] is_correct = args[i + 1].split(" ");
+            String isCorrect = MetodeTema.removeUselessCharacters(is_correct[1]);
+            boolean isCorrectBoolean = MetodeTema.turnStringIntoBoolean(isCorrect);
+            Answer answer = new Answer(answerText, isCorrectBoolean);
+            question.addAnswer(answer);
+        }
+        return null;
+    }
+
+    public static String getAllQuestions(String path_to_question) {
+        try {
+            File file = new File(path_to_question);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if(read == null) {
+                br.close();
+                fr.close();
+                return null;
+            }
+            read = br.readLine();
+            String questions = "";
+            int i = 0;
+            while (read != null) {
+                String identifier = read.substring(0, read.indexOf(","));
+                String text = read.substring(read.indexOf(",") + 1, read.lastIndexOf(","));
+                questions += "{\"question_id\""+ " : " + "\"" + identifier + "\"" +
+                             ", " + "\"" + "question_name" + "\"" + " : "
+                             + "\"" + text + "\"" + "}";
+                if(i != Question.getNumber_of_questions() - 1) {
+                    questions += ", ";
+                }
+                i++;
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+            return questions;
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static String getQuestionDetailsById(String path, String index) {
+        try {
+            String path_to_answers = "src/main/java/com/example/project/answers.csv";
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if(read == null) {
+                br.close();
+                fr.close();
+                return null;
+            }
+            read = br.readLine();
+            while (read != null) {
+                String identifier = read.substring(0, read.indexOf(","));
+                if(identifier.equals(index)) {
+                    String text = read.substring(read.indexOf(",") + 1, read.lastIndexOf(","));
+                    String type = read.substring(read.lastIndexOf(",") + 1);
+                    String quizz_details = "{\"question_name\"" + " : " + "\"" + text + "\"" +
+                            ", " + "\"" + "question_index" + "\"" + " : "
+                            + "\"" + identifier + "\"" + ", " + "\"" + "question_type" + "\"" + " : "
+                            + "\"" + type + "\"" + ", " + "\"" + "answers" + "\"" + " : "
+                            + "[" + Answer.getAnswersByQuestionId(path_to_answers, identifier) + "]" + "}";
+                    br.close();
+                    fr.close();
+                    return quizz_details;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+
+        }
+        return null;
+    }
+}
\ No newline at end of file
Index: src/main/java/com/example/project/User.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/project/User.java b/src/main/java/com/example/project/User.java
new file mode 100644
--- /dev/null	(date 1669750029458)
+++ b/src/main/java/com/example/project/User.java	(date 1669750029458)
@@ -0,0 +1,135 @@
+package com.example.project;
+
+import com.opencsv.CSVWriter;
+
+import java.io.*;
+
+public class User {
+
+    private final String username;
+    private final String password;
+
+    public User(String username, String password) {
+        this.username = username;
+        this.password = password;
+    }
+
+    public String getUsername() {
+        return this.username;
+    }
+
+    public String getPassword() {
+        return this.password;
+    }
+
+    public static int readUsersFromFile(String path, User user){
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br = new BufferedReader(fr);
+            String read = br.readLine();
+            if(read == null) {
+                br.close();
+                fr.close();
+                return -1;
+            }
+            read = br.readLine();
+            while (read != null) {
+
+                String username = read.substring(0, read.indexOf(","));
+                if(user.getUsername().compareTo(username) == 0 ) {
+                    br.close();
+                    fr.close();
+                    return -2;
+                }
+                read = br.readLine();
+            }
+            br.close();
+            fr.close();
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+        }
+        return 0;
+    }
+
+    public static String writeUsersToFile(String path, User user) {
+        try {
+            File file = new File(path);
+            FileWriter fileWriter = new FileWriter(file, true);
+            char[] csvFlags = {CSVWriter.NO_QUOTE_CHARACTER, CSVWriter.NO_ESCAPE_CHARACTER};
+            CSVWriter csvWriter = new CSVWriter(fileWriter, ',',csvFlags[0], csvFlags[1], "\n");
+
+            int readUsersReturn = User.readUsersFromFile(path, user);
+            if(readUsersReturn == -1) {
+                String[] header = {"username", "password"};
+                csvWriter.writeNext(header);
+            }
+            if(readUsersReturn == -2) {
+                csvWriter.close();
+                fileWriter.close();
+                return "{ 'status' : 'error', 'message' : 'User already exists'}";
+            }
+            String[] userInfo = {user.getUsername(),user.getPassword()};
+            csvWriter.writeNext(userInfo);
+
+            csvWriter.close();
+            fileWriter.close();
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+        }
+        return null;
+    }
+
+    public static boolean checkCredentials(String path, User user) {
+        try {
+            File file = new File(path);
+            FileReader fr = new FileReader(file);
+            BufferedReader br_up = new BufferedReader(fr);
+            String read = br_up.readLine();
+            if(read == null) {
+                br_up.close();
+                fr.close();
+                return false;
+            }
+            read = br_up.readLine();
+            while (read != null) {
+
+                String username = read.substring(0, read.indexOf(","));
+                String password = read.substring(read.indexOf(",") + 1);
+                if(user.getUsername().compareTo(username) == 0 && user.getPassword().compareTo(password) == 0) {
+                    br_up.close();
+                    fr.close();
+                    return true;
+                }
+                read = br_up.readLine();
+            }
+            br_up.close();
+            fr.close();
+        }
+        catch (IOException e) {
+            e.printStackTrace();
+        }
+        return false;
+    }
+
+    public static String checkLogin(String[] args) {
+        if(MetodeTema.findCommandInArgs(args, "-u") == null || MetodeTema.findCommandInArgs(args, "-p") == null) {
+            return "{ 'status' : 'error', 'message' : 'You need to be authenticated'}";
+        }
+        String[] username = args[1].split(" ");
+        String[] password = args[2].split(" ");
+
+        String path_to_users = "src/main/java/com/example/project/users.csv";
+
+        username[1] = MetodeTema.removeUselessCharacters(username[1]);
+        password[1] = MetodeTema.removeUselessCharacters(password[1]);
+        User user = new User(username[1], password[1]);
+        if(!User.checkCredentials(path_to_users, user)) {
+            return  "{ 'status' : 'error', 'message' : 'Login failed'}";
+        }
+        return null;
+    }
+
+}
Index: .idea/dictionaries/horia.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/dictionaries/horia.xml b/.idea/dictionaries/horia.xml
new file mode 100644
--- /dev/null	(date 1668974375442)
+++ b/.idea/dictionaries/horia.xml	(date 1668974375442)
@@ -0,0 +1,3 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="horia" />
+</component>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
new file mode 100644
--- /dev/null	(date 1668698550300)
+++ b/.idea/compiler.xml	(date 1668698550300)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="CompilerConfiguration">
+    <bytecodeTargetLevel target="17" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/inspectionProfiles/Project_Default.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/inspectionProfiles/Project_Default.xml b/.idea/inspectionProfiles/Project_Default.xml
new file mode 100644
--- /dev/null	(date 1668974375301)
+++ b/.idea/inspectionProfiles/Project_Default.xml	(date 1668974375301)
@@ -0,0 +1,10 @@
+<component name="InspectionProjectProfileManager">
+  <profile version="1.0">
+    <option name="myName" value="Project Default" />
+    <inspection_tool class="SpellCheckingInspection" enabled="false" level="TYPO" enabled_by_default="false">
+      <option name="processCode" value="true" />
+      <option name="processLiterals" value="true" />
+      <option name="processComments" value="true" />
+    </inspection_tool>
+  </profile>
+</component>
\ No newline at end of file
Index: .idea/jarRepositories.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
new file mode 100644
--- /dev/null	(date 1668698550375)
+++ b/.idea/jarRepositories.xml	(date 1668698550375)
@@ -0,0 +1,20 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="RemoteRepositoriesConfiguration">
+    <remote-repository>
+      <option name="id" value="central" />
+      <option name="name" value="Maven Central repository" />
+      <option name="url" value="https://repo1.maven.org/maven2" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="jboss.community" />
+      <option name="name" value="JBoss Community repository" />
+      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
+    </remote-repository>
+    <remote-repository>
+      <option name="id" value="MavenRepo" />
+      <option name="name" value="MavenRepo" />
+      <option name="url" value="https://repo.maven.apache.org/maven2/" />
+    </remote-repository>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/gradle.xml b/.idea/gradle.xml
new file mode 100644
--- /dev/null	(date 1668874065351)
+++ b/.idea/gradle.xml	(date 1668874065351)
@@ -0,0 +1,17 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="GradleMigrationSettings" migrationVersion="1" />
+  <component name="GradleSettings">
+    <option name="linkedExternalProjectsSettings">
+      <GradleProjectSettings>
+        <option name="distributionType" value="DEFAULT_WRAPPED" />
+        <option name="externalProjectPath" value="$PROJECT_DIR$" />
+        <option name="modules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+          </set>
+        </option>
+      </GradleProjectSettings>
+    </option>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
new file mode 100644
--- /dev/null	(date 1668698550321)
+++ b/.idea/vcs.xml	(date 1668698550321)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
